import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  
from sklearn.metrics import classification_report
from random import randint

class MalWareDetection:
    model = None
    prev = None
    prev_prediction = None

    @staticmethod
    def solve(hash):
        try:
            MalWareDetection.model.predict({"hash":hash})
        except:
            if randint(1,2) == 1:
                return True
            else:
                return False

    @staticmethod
    def test_model(rfc_model,X_test,y_test):
        """
        This function evaluates the performance of a trained Random Forest Classifier model.

        Args:
            rfc_model: The trained Random Forest Classifier model.
            X_test: The testing data features (scaled if applicable).
            y_test: The true labels for the testing data.

        Returns:
            A dictionary containing the following evaluation metrics:
                accuracy: Overall accuracy of the model.
                precision: Precision score for the positive class (e.g., 'malware').
                recall: Recall score for the positive class.
                f1_score: F1-score for the positive class.
        """
        # Make predictions on the testing data
        y_pred = rfc_model.predict(X_test)

        # Calculate evaluation metrics
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred)
        recall = recall_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)

        print("Accuracy:", accuracy)
        print("Precision:", precision)
        print("Recall:", recall)
        print("F1-Score:", f1_score)
        # Return evaluation metrics as a dictionary
        # return {
        #     "accuracy": accuracy,
        #     "precision": precision,
        #     "recall": recall,
        #     "f1_score": f1
        # }


    @staticmethod
    def train_model():
        dataset = pd.read_csv('malware_dataset.csv')

        # drop unique value cols
        df = dataset.drop(
            columns = ['hash'],
            axis = 1
        )

        # check for null values
        df.isnull().sum()

        # drop null values
        df = df.dropna()

        df.isnull().sum()

        encoder = LabelEncoder()
        df['classification'] = encoder.fit_transform(df['classification'])

        df['classification'].value_counts()

        # removing columns with no correlation
        df_new = df.drop(
            columns = [
                'usage_counter', 
                'normal_prio',
                'policy',
                'vm_pgoff',
                'task_size',
                'cached_hole_size',
                'hiwater_rss',
                'nr_ptes',
                'lock',
                'cgtime',
                'signal_nvcsw'
            ],
            axis = 1
        )

        correlation = df_new.corr()


        # Target column / Dependent Variable
        y = df_new['classification']

        # Independent columns
        x = df_new.drop(
            columns = ['classification'],
            axis = 1
        )

        correlation['classification'].sort_values(ascending = False)

        scaler = MinMaxScaler()

        x_scaled = pd.DataFrame(
            scaler.fit_transform(x),
            columns = x.columns
        )

        x_train, x_test, y_train, y_test = train_test_split(
            x_scaled,
            y,
            test_size = 0.25,
            random_state = 42
        )

        rfc_model = RandomForestClassifier(
            n_estimators = 50,
            max_depth = 8
        )

        rfc_model.fit(x_train, y_train)

        MalWareDetection.test_model(rfc_model,x_test,y_test)
        MalWareDetection.model = rfc_model

if MalWareDetection.model == None:
    MalWareDetection.train_model()